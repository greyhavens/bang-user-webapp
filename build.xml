<!-- build configuration -->
<project name="banguser-webapp" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="jsrc.dir" value="src/main/java"/>
  <property name="ssrc.dir" value="src/main/scala"/>
  <property name="target.dir" value="target"/>
  <property name="webapp.dir" value="${target.dir}/webapp"/>
  <property name="classes.dir" value="${webapp.dir}/WEB-INF/classes"/>

  <!-- bring in our standard build support -->
  <property name="ooo-build.vers" value="2.9"/>
  <ant antfile="etc/bootstrap.xml"/>
  <import file="${user.home}/.m2/ooo-build/${ooo-build.vers}/ooo-build.xml"/>

  <!-- this will be overridden by the build server -->
  <property name="ooo.distribution" value="local"/>

  <target name="-prepare" depends="-init-ooo">
    <mkdir dir="${target.dir}"/>

    <artifact:dependencies pathId="pom.classpath" filesetId="pom.fileset">
      <pom file="pom.xml"/>
    </artifact:dependencies>
    <path id="build.classpath">
      <path refid="pom.classpath"/>
      <pathelement location="${classes.dir}"/>
    </path>

    <!-- copy the webapp bits -->
    <mkdir dir="${webapp.dir}"/>
    <copy todir="${webapp.dir}">
      <fileset dir="src/main/webapp" includes="**"/>
    </copy>

    <mkdir dir="${webapp.dir}/WEB-INF/lib"/>
    <copy todir="${webapp.dir}/WEB-INF/lib" flatten="true">
      <fileset refid="pom.fileset"/>
    </copy>

    <!-- obtain our configuration files -->
    <mkdir dir="${classes.dir}"/>
    <maventaskdef groupId="com.threerings.internal.ant" artifactId="gatherconfiguration"
                  version="1.3"/>
    <internalgather app="threerings" dest="${classes.dir}" distribution="${ooo.distribution}">
      <sources refid="ooo.oooconfig.source"/>
      <sources><directory path="${basedir}/etc"/></sources>
      <files>
        <file name="oooauth.properties"/>
      </files>
    </internalgather>
  </target>

  <!-- TODO: put this in Maven installable Ant bundle? -->
  <target name="-init-jetty-ant" depends="-init-ooo">
    <artifact:dependencies pathId="jetty-ant.classpath">
      <dependency groupId="org.mortbay.jetty" artifactId="jetty-ant"
                  version="6.1.25" scope="runtime" />
      <dependency groupId="org.mortbay.jetty" artifactId="jetty-ajp"
                  version="6.1.25" scope="runtime" />
      <dependency groupId="org.mortbay.jetty" artifactId="jsp-2.1"
                  version="6.1.14" scope="runtime" />
    </artifact:dependencies>
    <taskdef resource="tasks.properties"
             classpathref="jetty-ant.classpath" loaderref="jetty.loader"/>
    <typedef name="selectChannelConnector" classname="org.mortbay.jetty.nio.SelectChannelConnector"
             classpathref="jetty-ant.classpath" loaderref="jetty.loader"/>
    <typedef name="ajp13SocketConnector" classname="org.mortbay.jetty.ajp.Ajp13SocketConnector"
             classpathref="jetty-ant.classpath" loaderref="jetty.loader"/>
  </target>

  <target name="clean" description="Cleans out compilation results.">
    <delete dir="${target.dir}"/>
  </target>

  <target name="gmsgs" depends="-prepare" description="Updates our GWT i18n messages.">
    <taskdef name="i18nsync" classname="com.threerings.gwt.tools.I18nSyncTask"
             classpathref="pom.classpath"/>
    <i18nsync srcdir="${jsrc.dir}">
      <fileset dir="${jsrc.dir}" includes="**/*Messages.properties"/>
    </i18nsync>
  </target>

  <target name="compile" depends="-prepare,gmsgs" description="Compiles the code.">
    <ooojavac srcdir="${jsrc.dir}" destdir="${classes.dir}" version="1.6"
        classpathref="pom.classpath"/>

    <artifact:dependencies pathId="scalac.classpath">
      <dependency groupId="org.scala-lang" artifactId="scala-compiler" version="2.9.1"/>
      <dependency groupId="org.scala-lang" artifactId="scala-library" version="2.9.1"/>
    </artifact:dependencies>
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scalac.classpath"/>
    <scalac srcdir="${ssrc.dir}" destdir="${classes.dir}" classpathref="build.classpath"/>
  </target>

  <target name="genasync" depends="compile" description="Regenerates GWT Async interfaces.">
    <artifact:dependencies pathId="genasync.classpath">
      <dependency groupId="com.samskivert" artifactId="gwt-asyncgen" version="1.0"/>
    </artifact:dependencies>
    <taskdef name="genasync" classname="com.samskivert.asyncgen.AsyncGenTask"
             classpathref="genasync.classpath"/>
    <genasync classpathref="build.classpath">
      <fileset dir="${jsrc.dir}" includes="**/*Service.java"/>
    </genasync>
  </target>

  <target name="gcompile" depends="compile" description="Compiles Java to JavaScript.">
    <artifact:dependencies pathId="gwt-dev.classpath">
      <dependency groupId="com.google.gwt" artifactId="gwt-dev" version="2.4.0"/>
    </artifact:dependencies>
    <java fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <path refid="gwt-dev.classpath"/>
        <path refid="build.classpath"/>
        <pathelement path="${jsrc.dir}"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <arg value="-war"/>
      <arg value="${webapp.dir}"/>
      <arg value="com.threerings.banguser.BangUserWebapp"/>
    </java>
  </target>

  <target name="jetty" depends="compile,-init-jetty-ant">
    <!-- create a fake webapp that serves up the stock website -->
    <mkdir dir="${target.dir}/root-webapp"/>
    <mkdir dir="${target.dir}/root-webapp/WEB-INF"/>
    <copy tofile="${target.dir}/root-webapp/WEB-INF/web.xml" file="etc/howdy-web.xml"/>

    <!-- Fire up the webapp against the live sources -->
    <jetty tempDirectory="${target.dir}/jetty-temp">
      <!-- this serves up the stock website files -->
      <webApp name="root" warfile="${target.dir}/root-webapp" contextpath="/"/>

      <!-- this serves up our webapp -->
      <webApp name="${ant.project.name}" warfile="${webapp.dir}" contextpath="/account"
              scanIntervalSeconds="2">
        <classes dir="${classes.dir}"/>
        <lib dir="${webapp.dir}/WEB-INF/lib" includes="*.jar"/>
      </webApp>

      <connectors>
	<selectChannelConnector port="8888"/>
      </connectors>
    </jetty>
  </target>

  <target name="gdevmode" depends="compile" description="Runs GWT devmode.">
    <artifact:dependencies pathId="gwt-dev.classpath">
      <dependency groupId="com.google.gwt" artifactId="gwt-dev" version="2.4.0"/>
    </artifact:dependencies>
    <java fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <path refid="gwt-dev.classpath"/>
        <path refid="build.classpath"/>
        <pathelement path="${jsrc.dir}"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <arg value="-noserver"/>
      <arg value="-war"/>
      <arg value="${webapp.dir}"/>
      <arg value="-startupUrl"/>
      <arg value="/account/"/>
      <arg value="com.threerings.banguser.BangUserWebapp"/>
    </java>
  </target>

  <target name="package" depends="gcompile" description="Builds everything into dpkg.">
    <!-- define some package properties -->
    <property name="threerings.user"  value="_threerings"/>
    <property name="pkgroot.dir" value="${target.dir}/dpkg/${ant.project.name}"/>
    <tstamp><format property="build.version" pattern="yyyyMMddHHmmss"/></tstamp>

    <!-- create our war file right in the dpkg staging dir -->
    <property name="approot.dir" value="${pkgroot.dir}/usr/share/jetty/webapps"/>
    <mkdir dir="${approot.dir}"/>
    <jar destfile="${approot.dir}/${ant.project.name}.war">
      <fileset dir="${webapp.dir}" includes="**"/>
    </jar>

    <!-- create the debian package -->
    <maventaskdef groupId="com.threerings.internal.ant" artifactId="dpkg" version="1.1"/>
    <ooodpkg prefix="/usr/share/jetty/webapps" destroot="${pkgroot.dir}" version="${build.version}"
             name="${ant.project.name}" description="Bang User Webapp"/>
  </target>

  <target name="bamboo" depends="package" description="Builds + deploys dpkg, then cleans up.">
    <aptupdate/>
    <antcall target="clean"/>
  </target>
</project>
